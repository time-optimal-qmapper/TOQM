OPENQASM 2.0;
include "qelib1.inc";
qreg q[5];
creg c[5];
u3(0.000000, 0.000000, 0.785398) q[1]; //cycle: 0 //u3(0.000000, 0.000000, 0.785398) logical_q[3]
cx q[2],q[3]; //cycle: 0 //cx logical_q[4],logical_q[0]
u3(0.000000, 0.000000, 0.785398) q[4]; //cycle: 0 //u3(0.000000, 0.000000, 0.785398) logical_q[1]
u3(0.000000, 0.000000, 0.785398) q[0]; //cycle: 0 //u3(0.000000, 0.000000, 0.785398) logical_q[2]
u3(1.570796, 0.000000, 3.141593) q[3]; //cycle: 1 //u3(1.570796, 0.000000, 3.141593) logical_q[0]
u3(0.000000, 0.000000, 0.785398) q[2]; //cycle: 1 //u3(0.000000, 0.000000, 0.785398) logical_q[4]
cx q[0],q[1]; //cycle: 1 //cx logical_q[2],logical_q[3]
cx q[2],q[4]; //cycle: 2 //cx logical_q[4],logical_q[1]
u3(0.000000, 0.000000, 0.785398) q[3]; //cycle: 2 //u3(0.000000, 0.000000, 0.785398) logical_q[0]
cx q[3],q[2]; //cycle: 3 //cx logical_q[0],logical_q[4]
u3(0.000000, 0.000000, -0.785398) q[2]; //cycle: 4 //u3(0.000000, 0.000000, -0.785398) logical_q[4]
cx q[4],q[3]; //cycle: 4 //cx logical_q[1],logical_q[0]
cx q[4],q[2]; //cycle: 5 //cx logical_q[1],logical_q[4]
u3(0.000000, 0.000000, 0.785398) q[3]; //cycle: 5 //u3(0.000000, 0.000000, 0.785398) logical_q[0]
u3(0.000000, 0.000000, -0.785398) q[4]; //cycle: 6 //u3(0.000000, 0.000000, -0.785398) logical_q[1]
u3(0.000000, 0.000000, -0.785398) q[2]; //cycle: 6 //u3(0.000000, 0.000000, -0.785398) logical_q[4]
cx q[3],q[2]; //cycle: 7 //cx logical_q[0],logical_q[4]
cx q[4],q[3]; //cycle: 8 //cx logical_q[1],logical_q[0]
u3(1.570796, 0.000000, 3.141593) q[3]; //cycle: 9 //u3(1.570796, 0.000000, 3.141593) logical_q[0]
cx q[2],q[4]; //cycle: 9 //cx logical_q[4],logical_q[1]
u3(1.570796, 0.000000, 3.141593) q[3]; //cycle: 10 //u3(1.570796, 0.000000, 3.141593) logical_q[0]
u3(0.000000, 0.000000, 0.785398) q[4]; //cycle: 10 //u3(0.000000, 0.000000, 0.785398) logical_q[1]
u3(1.570796, 0.000000, 3.141593) q[2]; //cycle: 10 //u3(1.570796, 0.000000, 3.141593) logical_q[4]
u3(0.000000, 0.000000, 0.785398) q[2]; //cycle: 11 //u3(0.000000, 0.000000, 0.785398) logical_q[4]
u3(0.000000, 0.000000, 0.785398) q[3]; //cycle: 11 //u3(0.000000, 0.000000, 0.785398) logical_q[0]
cx q[2],q[0]; //cycle: 12 //cx logical_q[4],logical_q[2]
cx q[1],q[2]; //cycle: 13 //cx logical_q[3],logical_q[4]
u3(0.000000, 0.000000, -0.785398) q[0]; //cycle: 13 //u3(0.000000, 0.000000, -0.785398) logical_q[2]
cx q[1],q[0]; //cycle: 14 //cx logical_q[3],logical_q[2]
u3(0.000000, 0.000000, 0.785398) q[2]; //cycle: 14 //u3(0.000000, 0.000000, 0.785398) logical_q[4]
u3(0.000000, 0.000000, -0.785398) q[1]; //cycle: 15 //u3(0.000000, 0.000000, -0.785398) logical_q[3]
u3(0.000000, 0.000000, -0.785398) q[0]; //cycle: 15 //u3(0.000000, 0.000000, -0.785398) logical_q[2]
cx q[2],q[0]; //cycle: 16 //cx logical_q[4],logical_q[2]
cx q[1],q[2]; //cycle: 17 //cx logical_q[3],logical_q[4]
cx q[0],q[1]; //cycle: 18 //cx logical_q[2],logical_q[3]
u3(1.570796, 0.000000, 3.141593) q[2]; //cycle: 18 //u3(1.570796, 0.000000, 3.141593) logical_q[4]
u3(0.000000, 0.000000, 0.785398) q[2]; //cycle: 19 //u3(0.000000, 0.000000, 0.785398) logical_q[4]
u3(0.000000, 0.000000, 0.785398) q[1]; //cycle: 19 //u3(0.000000, 0.000000, 0.785398) logical_q[3]
u3(0.000000, 0.000000, 0.785398) q[0]; //cycle: 19 //u3(0.000000, 0.000000, 0.785398) logical_q[2]
cx q[2],q[4]; //cycle: 20 //cx logical_q[4],logical_q[1]
cx q[0],q[1]; //cycle: 20 //cx logical_q[2],logical_q[3]
cx q[3],q[2]; //cycle: 21 //cx logical_q[0],logical_q[4]
cx q[4],q[3]; //cycle: 22 //cx logical_q[1],logical_q[0]
u3(0.000000, 0.000000, -0.785398) q[2]; //cycle: 22 //u3(0.000000, 0.000000, -0.785398) logical_q[4]
cx q[4],q[2]; //cycle: 23 //cx logical_q[1],logical_q[4]
u3(0.000000, 0.000000, 0.785398) q[3]; //cycle: 23 //u3(0.000000, 0.000000, 0.785398) logical_q[0]
u3(0.000000, 0.000000, -0.785398) q[4]; //cycle: 24 //u3(0.000000, 0.000000, -0.785398) logical_q[1]
u3(0.000000, 0.000000, -0.785398) q[2]; //cycle: 24 //u3(0.000000, 0.000000, -0.785398) logical_q[4]
cx q[3],q[2]; //cycle: 25 //cx logical_q[0],logical_q[4]
cx q[4],q[3]; //cycle: 26 //cx logical_q[1],logical_q[0]
cx q[2],q[4]; //cycle: 27 //cx logical_q[4],logical_q[1]
u3(1.570796, 0.000000, 3.141593) q[3]; //cycle: 27 //u3(1.570796, 0.000000, 3.141593) logical_q[0]
u3(1.570796, 0.000000, 3.141593) q[2]; //cycle: 28 //u3(1.570796, 0.000000, 3.141593) logical_q[4]
u3(0.000000, 0.000000, 0.785398) q[2]; //cycle: 29 //u3(0.000000, 0.000000, 0.785398) logical_q[4]
cx q[2],q[0]; //cycle: 30 //cx logical_q[4],logical_q[2]
cx q[1],q[2]; //cycle: 31 //cx logical_q[3],logical_q[4]
u3(0.000000, 0.000000, -0.785398) q[0]; //cycle: 31 //u3(0.000000, 0.000000, -0.785398) logical_q[2]
cx q[1],q[0]; //cycle: 32 //cx logical_q[3],logical_q[2]
u3(0.000000, 0.000000, 0.785398) q[2]; //cycle: 32 //u3(0.000000, 0.000000, 0.785398) logical_q[4]
u3(0.000000, 0.000000, -0.785398) q[1]; //cycle: 33 //u3(0.000000, 0.000000, -0.785398) logical_q[3]
u3(0.000000, 0.000000, -0.785398) q[0]; //cycle: 33 //u3(0.000000, 0.000000, -0.785398) logical_q[2]
cx q[2],q[0]; //cycle: 34 //cx logical_q[4],logical_q[2]
cx q[1],q[2]; //cycle: 35 //cx logical_q[3],logical_q[4]
cx q[0],q[1]; //cycle: 36 //cx logical_q[2],logical_q[3]
u3(1.570796, 0.000000, 3.141593) q[2]; //cycle: 36 //u3(1.570796, 0.000000, 3.141593) logical_q[4]
cx q[3],q[2]; //cycle: 37 //cx logical_q[0],logical_q[4]
//66 original gates
//66 final gates
//38 original depth (cycles)
//38 cycles in selected mapping
//41 nodes expanded (popped from queue).
//16 nodes remain in queue.
